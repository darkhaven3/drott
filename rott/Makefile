# Makefile.in generated by automake 1.16.5 from Makefile.am.
# rott/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/rott
pkgincludedir = $(includedir)/rott
pkglibdir = $(libdir)/rott
pkglibexecdir = $(libexecdir)/rott
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-w64-mingw32
host_triplet = i686-w64-mingw32
bin_PROGRAMS = rott$(EXEEXT)
subdir = rott
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_rott_OBJECTS = rott-byteordr.$(OBJEXT) \
	rott-cin_actr.$(OBJEXT) \
	rott-cin_efct.$(OBJEXT) \
	rott-cin_evnt.$(OBJEXT) \
	rott-cin_glob.$(OBJEXT) \
	rott-cin_main.$(OBJEXT) \
	rott-cin_util.$(OBJEXT) rott-dosutil.$(OBJEXT) \
	rott-dukemusc.$(OBJEXT) rott-engine.$(OBJEXT) \
	rott-isr.$(OBJEXT) rott-modexlib.$(OBJEXT) \
	rott-rt_actor.$(OBJEXT) \
	rott-rt_battl.$(OBJEXT) \
	rott-rt_build.$(OBJEXT) rott-rt_cfg.$(OBJEXT) \
	rott-rt_com.$(OBJEXT) rott-rt_crc.$(OBJEXT) \
	rott-rt_debug.$(OBJEXT) \
	rott-rt_dmand.$(OBJEXT) rott-rt_door.$(OBJEXT) \
	rott-rt_draw.$(OBJEXT) rott-rt_err.$(OBJEXT) \
	rott-rt_floor.$(OBJEXT) rott-rt_game.$(OBJEXT) \
	rott-rt_in.$(OBJEXT) \
	rott-rt_scancodes.$(OBJEXT) \
	rott-rt_main.$(OBJEXT) rott-rt_map.$(OBJEXT) \
	rott-rt_menu.$(OBJEXT) rott-rt_msg.$(OBJEXT) \
	rott-rt_net.$(OBJEXT) rott-rt_playr.$(OBJEXT) \
	rott-rt_rand.$(OBJEXT) rott-rt_scale.$(OBJEXT) \
	rott-rt_sound.$(OBJEXT) \
	rott-rt_spbal.$(OBJEXT) rott-rt_sqrt.$(OBJEXT) \
	rott-rt_stat.$(OBJEXT) rott-rt_state.$(OBJEXT) \
	rott-rt_str.$(OBJEXT) rott-rt_swift.$(OBJEXT) \
	rott-rt_ted.$(OBJEXT) rott-rt_util.$(OBJEXT) \
	rott-rt_vid.$(OBJEXT) rott-rt_view.$(OBJEXT) \
	rott-scriplib.$(OBJEXT) rott-watcom.$(OBJEXT) \
	rott-winrott.$(OBJEXT) rott-w_wad.$(OBJEXT) \
	rott-z_zone.$(OBJEXT)
rott_OBJECTS = $(am_rott_OBJECTS)
rott_DEPENDENCIES = audiolib/libaudiolib.a
rott_LINK = $(CXXLD) $(rott_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = ./$(DEPDIR)/rott-byteordr.Po \
	./$(DEPDIR)/rott-cin_actr.Po \
	./$(DEPDIR)/rott-cin_efct.Po \
	./$(DEPDIR)/rott-cin_evnt.Po \
	./$(DEPDIR)/rott-cin_glob.Po \
	./$(DEPDIR)/rott-cin_main.Po \
	./$(DEPDIR)/rott-cin_util.Po \
	./$(DEPDIR)/rott-dosutil.Po \
	./$(DEPDIR)/rott-dukemusc.Po \
	./$(DEPDIR)/rott-engine.Po \
	./$(DEPDIR)/rott-isr.Po \
	./$(DEPDIR)/rott-modexlib.Po \
	./$(DEPDIR)/rott-rt_actor.Po \
	./$(DEPDIR)/rott-rt_battl.Po \
	./$(DEPDIR)/rott-rt_build.Po \
	./$(DEPDIR)/rott-rt_cfg.Po \
	./$(DEPDIR)/rott-rt_com.Po \
	./$(DEPDIR)/rott-rt_crc.Po \
	./$(DEPDIR)/rott-rt_debug.Po \
	./$(DEPDIR)/rott-rt_dmand.Po \
	./$(DEPDIR)/rott-rt_door.Po \
	./$(DEPDIR)/rott-rt_draw.Po \
	./$(DEPDIR)/rott-rt_err.Po \
	./$(DEPDIR)/rott-rt_floor.Po \
	./$(DEPDIR)/rott-rt_game.Po \
	./$(DEPDIR)/rott-rt_in.Po \
	./$(DEPDIR)/rott-rt_main.Po \
	./$(DEPDIR)/rott-rt_map.Po \
	./$(DEPDIR)/rott-rt_menu.Po \
	./$(DEPDIR)/rott-rt_msg.Po \
	./$(DEPDIR)/rott-rt_net.Po \
	./$(DEPDIR)/rott-rt_playr.Po \
	./$(DEPDIR)/rott-rt_rand.Po \
	./$(DEPDIR)/rott-rt_scale.Po \
	./$(DEPDIR)/rott-rt_scancodes.Po \
	./$(DEPDIR)/rott-rt_sound.Po \
	./$(DEPDIR)/rott-rt_spbal.Po \
	./$(DEPDIR)/rott-rt_sqrt.Po \
	./$(DEPDIR)/rott-rt_stat.Po \
	./$(DEPDIR)/rott-rt_state.Po \
	./$(DEPDIR)/rott-rt_str.Po \
	./$(DEPDIR)/rott-rt_swift.Po \
	./$(DEPDIR)/rott-rt_ted.Po \
	./$(DEPDIR)/rott-rt_util.Po \
	./$(DEPDIR)/rott-rt_vid.Po \
	./$(DEPDIR)/rott-rt_view.Po \
	./$(DEPDIR)/rott-scriplib.Po \
	./$(DEPDIR)/rott-w_wad.Po \
	./$(DEPDIR)/rott-watcom.Po \
	./$(DEPDIR)/rott-winrott.Po \
	./$(DEPDIR)/rott-z_zone.Po
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(rott_SOURCES)
DIST_SOURCES = $(rott_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	distdir distdir-am
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
DIST_SUBDIRS = $(SUBDIRS)
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = ${SHELL} '/d/drott/drott-staging/missing' aclocal-1.16
ALLOCA = 
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AUTOCONF = ${SHELL} '/d/drott/drott-staging/missing' autoconf
AUTOHEADER = ${SHELL} '/d/drott/drott-staging/missing' autoheader
AUTOMAKE = ${SHELL} '/d/drott/drott-staging/missing' automake-1.16
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPPFLAGS = 
CSCOPE = cscope
CTAGS = ctags
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = cygpath -w
DEFS = -DPACKAGE_NAME=\"rott\" -DPACKAGE_TARNAME=\"rott\" -DPACKAGE_VERSION=\"1.1.2\" -DPACKAGE_STRING=\"rott\ 1.1.2\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DUSE_SDL=1 -DPLATFORM_UNIX=1 -DHAVE_STDIO_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_STRINGS_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_UNISTD_H=1 -DSTDC_HEADERS=1 -DHAVE_FCNTL_H=1 -DHAVE_LIMITS_H=1 -DHAVE_MALLOC_H=1 -DHAVE_STDDEF_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_UNISTD_H=1 -DHAVE__BOOL=1 -DHAVE_ALLOCA=1 -DHAVE_MALLOC=1 -DHAVE_REALLOC=1 -DHAVE_MEMMOVE=1 -DHAVE_MEMSET=1 -DHAVE_MKDIR=1 -DHAVE_POW=1 -DHAVE_STRCASECMP=1 -DHAVE_STRERROR=1 -DHAVE_STRRCHR=1 -DHAVE_STRSTR=1 -DHAVE_STRTOL=1
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
ETAGS = etags
EXEEXT = .exe
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} '/d/drott/drott-staging/missing' makeinfo
MKDIR_P = /usr/bin/mkdir -p
OBJEXT = o
PACKAGE = rott
PACKAGE_BUGREPORT = 
PACKAGE_NAME = rott
PACKAGE_STRING = rott 1.1.2
PACKAGE_TARNAME = rott
PACKAGE_URL = 
PACKAGE_VERSION = 1.1.2
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = /mingw32/lib/pkgconfig:/mingw32/share/pkgconfig
RANLIB = ranlib
SDL_CFLAGS = -I/usr/include -I/usr/include/SDL2 -Dmain=SDL_main
SDL_LIBS = -L/usr/lib -lmingw32 -lSDL2main -lSDL2 -mwindows
SDL_mixer_CFLAGS = -I/i686-w64-mingw32/include/SDL2 -I/usr/include -I/usr/include/SDL2 -Dmain=SDL_main
SDL_mixer_LIBS = -L/i686-w64-mingw32/lib -lSDL2_mixer -L/usr/lib -lmingw32 -lSDL2main -lSDL2 -mwindows
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
SUFFIX = 
VERSION = 1.1.2
abs_builddir = /d/drott/drott-staging/rott
abs_srcdir = /d/drott/drott-staging/rott
abs_top_builddir = /d/drott/drott-staging
abs_top_srcdir = /d/drott/drott-staging
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = i686-w64-mingw32
build_alias = i686-w64-mingw32
build_cpu = i686
build_os = mingw32
build_vendor = w64
builddir = .
datadir = no
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-w64-mingw32
host_alias = 
host_cpu = i686
host_os = mingw32
host_vendor = w64
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /d/drott/drott-staging/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /mingw32
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
SUBDIRS = audiolib
rott_SOURCES = \
	byteordr.c \
	cin_actr.c \
	cin_efct.c \
	cin_evnt.c \
	cin_glob.c \
	cin_main.c \
	cin_util.c \
	dosutil.c \
	dukemusc.c \
	engine.c \
	isr.c \
	modexlib.c \
	rt_actor.c \
	rt_battl.c \
	rt_build.c \
	rt_cfg.c \
	rt_com.c \
	rt_crc.c \
	rt_debug.c \
	rt_dmand.c \
	rt_door.c \
	rt_draw.c \
	rt_err.c \
	rt_floor.c \
	rt_game.c \
	rt_in.c \
	rt_scancodes.cpp \
	rt_main.c \
	rt_map.c \
	rt_menu.c \
	rt_msg.c \
	rt_net.c \
	rt_playr.c \
	rt_rand.c \
	rt_scale.c \
	rt_sound.c \
	rt_spbal.c \
	rt_sqrt.c \
	rt_stat.c \
	rt_state.c \
	rt_str.c \
	rt_swift.c \
	rt_ted.c \
	rt_util.c \
	rt_vid.c \
	rt_view.c \
	scriplib.c \
	watcom.c \
	winrott.c \
	w_wad.c \
	z_zone.c

rott_CFLAGS = -I/usr/include -I/usr/include/SDL2 -Dmain=SDL_main -I/i686-w64-mingw32/include/SDL2 -I/usr/include -I/usr/include/SDL2 -Dmain=SDL_main -static -static-libgcc -static-libstdc++
rott_CXXFLAGS = -I/usr/include -I/usr/include/SDL2 -Dmain=SDL_main -I/i686-w64-mingw32/include/SDL2 -I/usr/include -I/usr/include/SDL2 -Dmain=SDL_main
rott_LDADD = audiolib/libaudiolib.a -L/usr/lib -lmingw32 -lSDL2main -lSDL2 -mwindows -L/i686-w64-mingw32/lib -lSDL2_mixer -L/usr/lib -lmingw32 -lSDL2main -lSDL2 -mwindows
all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign rott/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign rott/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

rott$(EXEEXT): $(rott_OBJECTS) $(rott_DEPENDENCIES) $(EXTRA_rott_DEPENDENCIES) 
	@rm -f rott$(EXEEXT)
	$(AM_V_CXXLD)$(rott_LINK) $(rott_OBJECTS) $(rott_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/rott-byteordr.Po # am--include-marker
include ./$(DEPDIR)/rott-cin_actr.Po # am--include-marker
include ./$(DEPDIR)/rott-cin_efct.Po # am--include-marker
include ./$(DEPDIR)/rott-cin_evnt.Po # am--include-marker
include ./$(DEPDIR)/rott-cin_glob.Po # am--include-marker
include ./$(DEPDIR)/rott-cin_main.Po # am--include-marker
include ./$(DEPDIR)/rott-cin_util.Po # am--include-marker
include ./$(DEPDIR)/rott-dosutil.Po # am--include-marker
include ./$(DEPDIR)/rott-dukemusc.Po # am--include-marker
include ./$(DEPDIR)/rott-engine.Po # am--include-marker
include ./$(DEPDIR)/rott-isr.Po # am--include-marker
include ./$(DEPDIR)/rott-modexlib.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_actor.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_battl.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_build.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_cfg.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_com.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_crc.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_debug.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_dmand.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_door.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_draw.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_err.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_floor.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_game.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_in.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_main.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_map.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_menu.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_msg.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_net.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_playr.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_rand.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_scale.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_scancodes.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_sound.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_spbal.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_sqrt.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_stat.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_state.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_str.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_swift.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_ted.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_util.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_vid.Po # am--include-marker
include ./$(DEPDIR)/rott-rt_view.Po # am--include-marker
include ./$(DEPDIR)/rott-scriplib.Po # am--include-marker
include ./$(DEPDIR)/rott-w_wad.Po # am--include-marker
include ./$(DEPDIR)/rott-watcom.Po # am--include-marker
include ./$(DEPDIR)/rott-winrott.Po # am--include-marker
include ./$(DEPDIR)/rott-z_zone.Po # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.c.o:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

rott-byteordr.o: byteordr.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-byteordr.o -MD -MP -MF $(DEPDIR)/rott-byteordr.Tpo -c -o rott-byteordr.o `test -f 'byteordr.c' || echo '$(srcdir)/'`byteordr.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-byteordr.Tpo $(DEPDIR)/rott-byteordr.Po
#	$(AM_V_CC)source='byteordr.c' object='rott-byteordr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-byteordr.o `test -f 'byteordr.c' || echo '$(srcdir)/'`byteordr.c

rott-byteordr.obj: byteordr.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-byteordr.obj -MD -MP -MF $(DEPDIR)/rott-byteordr.Tpo -c -o rott-byteordr.obj `if test -f 'byteordr.c'; then $(CYGPATH_W) 'byteordr.c'; else $(CYGPATH_W) '$(srcdir)/byteordr.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-byteordr.Tpo $(DEPDIR)/rott-byteordr.Po
#	$(AM_V_CC)source='byteordr.c' object='rott-byteordr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-byteordr.obj `if test -f 'byteordr.c'; then $(CYGPATH_W) 'byteordr.c'; else $(CYGPATH_W) '$(srcdir)/byteordr.c'; fi`

rott-cin_actr.o: cin_actr.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_actr.o -MD -MP -MF $(DEPDIR)/rott-cin_actr.Tpo -c -o rott-cin_actr.o `test -f 'cin_actr.c' || echo '$(srcdir)/'`cin_actr.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_actr.Tpo $(DEPDIR)/rott-cin_actr.Po
#	$(AM_V_CC)source='cin_actr.c' object='rott-cin_actr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_actr.o `test -f 'cin_actr.c' || echo '$(srcdir)/'`cin_actr.c

rott-cin_actr.obj: cin_actr.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_actr.obj -MD -MP -MF $(DEPDIR)/rott-cin_actr.Tpo -c -o rott-cin_actr.obj `if test -f 'cin_actr.c'; then $(CYGPATH_W) 'cin_actr.c'; else $(CYGPATH_W) '$(srcdir)/cin_actr.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_actr.Tpo $(DEPDIR)/rott-cin_actr.Po
#	$(AM_V_CC)source='cin_actr.c' object='rott-cin_actr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_actr.obj `if test -f 'cin_actr.c'; then $(CYGPATH_W) 'cin_actr.c'; else $(CYGPATH_W) '$(srcdir)/cin_actr.c'; fi`

rott-cin_efct.o: cin_efct.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_efct.o -MD -MP -MF $(DEPDIR)/rott-cin_efct.Tpo -c -o rott-cin_efct.o `test -f 'cin_efct.c' || echo '$(srcdir)/'`cin_efct.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_efct.Tpo $(DEPDIR)/rott-cin_efct.Po
#	$(AM_V_CC)source='cin_efct.c' object='rott-cin_efct.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_efct.o `test -f 'cin_efct.c' || echo '$(srcdir)/'`cin_efct.c

rott-cin_efct.obj: cin_efct.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_efct.obj -MD -MP -MF $(DEPDIR)/rott-cin_efct.Tpo -c -o rott-cin_efct.obj `if test -f 'cin_efct.c'; then $(CYGPATH_W) 'cin_efct.c'; else $(CYGPATH_W) '$(srcdir)/cin_efct.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_efct.Tpo $(DEPDIR)/rott-cin_efct.Po
#	$(AM_V_CC)source='cin_efct.c' object='rott-cin_efct.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_efct.obj `if test -f 'cin_efct.c'; then $(CYGPATH_W) 'cin_efct.c'; else $(CYGPATH_W) '$(srcdir)/cin_efct.c'; fi`

rott-cin_evnt.o: cin_evnt.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_evnt.o -MD -MP -MF $(DEPDIR)/rott-cin_evnt.Tpo -c -o rott-cin_evnt.o `test -f 'cin_evnt.c' || echo '$(srcdir)/'`cin_evnt.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_evnt.Tpo $(DEPDIR)/rott-cin_evnt.Po
#	$(AM_V_CC)source='cin_evnt.c' object='rott-cin_evnt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_evnt.o `test -f 'cin_evnt.c' || echo '$(srcdir)/'`cin_evnt.c

rott-cin_evnt.obj: cin_evnt.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_evnt.obj -MD -MP -MF $(DEPDIR)/rott-cin_evnt.Tpo -c -o rott-cin_evnt.obj `if test -f 'cin_evnt.c'; then $(CYGPATH_W) 'cin_evnt.c'; else $(CYGPATH_W) '$(srcdir)/cin_evnt.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_evnt.Tpo $(DEPDIR)/rott-cin_evnt.Po
#	$(AM_V_CC)source='cin_evnt.c' object='rott-cin_evnt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_evnt.obj `if test -f 'cin_evnt.c'; then $(CYGPATH_W) 'cin_evnt.c'; else $(CYGPATH_W) '$(srcdir)/cin_evnt.c'; fi`

rott-cin_glob.o: cin_glob.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_glob.o -MD -MP -MF $(DEPDIR)/rott-cin_glob.Tpo -c -o rott-cin_glob.o `test -f 'cin_glob.c' || echo '$(srcdir)/'`cin_glob.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_glob.Tpo $(DEPDIR)/rott-cin_glob.Po
#	$(AM_V_CC)source='cin_glob.c' object='rott-cin_glob.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_glob.o `test -f 'cin_glob.c' || echo '$(srcdir)/'`cin_glob.c

rott-cin_glob.obj: cin_glob.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_glob.obj -MD -MP -MF $(DEPDIR)/rott-cin_glob.Tpo -c -o rott-cin_glob.obj `if test -f 'cin_glob.c'; then $(CYGPATH_W) 'cin_glob.c'; else $(CYGPATH_W) '$(srcdir)/cin_glob.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_glob.Tpo $(DEPDIR)/rott-cin_glob.Po
#	$(AM_V_CC)source='cin_glob.c' object='rott-cin_glob.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_glob.obj `if test -f 'cin_glob.c'; then $(CYGPATH_W) 'cin_glob.c'; else $(CYGPATH_W) '$(srcdir)/cin_glob.c'; fi`

rott-cin_main.o: cin_main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_main.o -MD -MP -MF $(DEPDIR)/rott-cin_main.Tpo -c -o rott-cin_main.o `test -f 'cin_main.c' || echo '$(srcdir)/'`cin_main.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_main.Tpo $(DEPDIR)/rott-cin_main.Po
#	$(AM_V_CC)source='cin_main.c' object='rott-cin_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_main.o `test -f 'cin_main.c' || echo '$(srcdir)/'`cin_main.c

rott-cin_main.obj: cin_main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_main.obj -MD -MP -MF $(DEPDIR)/rott-cin_main.Tpo -c -o rott-cin_main.obj `if test -f 'cin_main.c'; then $(CYGPATH_W) 'cin_main.c'; else $(CYGPATH_W) '$(srcdir)/cin_main.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_main.Tpo $(DEPDIR)/rott-cin_main.Po
#	$(AM_V_CC)source='cin_main.c' object='rott-cin_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_main.obj `if test -f 'cin_main.c'; then $(CYGPATH_W) 'cin_main.c'; else $(CYGPATH_W) '$(srcdir)/cin_main.c'; fi`

rott-cin_util.o: cin_util.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_util.o -MD -MP -MF $(DEPDIR)/rott-cin_util.Tpo -c -o rott-cin_util.o `test -f 'cin_util.c' || echo '$(srcdir)/'`cin_util.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_util.Tpo $(DEPDIR)/rott-cin_util.Po
#	$(AM_V_CC)source='cin_util.c' object='rott-cin_util.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_util.o `test -f 'cin_util.c' || echo '$(srcdir)/'`cin_util.c

rott-cin_util.obj: cin_util.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-cin_util.obj -MD -MP -MF $(DEPDIR)/rott-cin_util.Tpo -c -o rott-cin_util.obj `if test -f 'cin_util.c'; then $(CYGPATH_W) 'cin_util.c'; else $(CYGPATH_W) '$(srcdir)/cin_util.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-cin_util.Tpo $(DEPDIR)/rott-cin_util.Po
#	$(AM_V_CC)source='cin_util.c' object='rott-cin_util.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-cin_util.obj `if test -f 'cin_util.c'; then $(CYGPATH_W) 'cin_util.c'; else $(CYGPATH_W) '$(srcdir)/cin_util.c'; fi`

rott-dosutil.o: dosutil.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-dosutil.o -MD -MP -MF $(DEPDIR)/rott-dosutil.Tpo -c -o rott-dosutil.o `test -f 'dosutil.c' || echo '$(srcdir)/'`dosutil.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-dosutil.Tpo $(DEPDIR)/rott-dosutil.Po
#	$(AM_V_CC)source='dosutil.c' object='rott-dosutil.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-dosutil.o `test -f 'dosutil.c' || echo '$(srcdir)/'`dosutil.c

rott-dosutil.obj: dosutil.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-dosutil.obj -MD -MP -MF $(DEPDIR)/rott-dosutil.Tpo -c -o rott-dosutil.obj `if test -f 'dosutil.c'; then $(CYGPATH_W) 'dosutil.c'; else $(CYGPATH_W) '$(srcdir)/dosutil.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-dosutil.Tpo $(DEPDIR)/rott-dosutil.Po
#	$(AM_V_CC)source='dosutil.c' object='rott-dosutil.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-dosutil.obj `if test -f 'dosutil.c'; then $(CYGPATH_W) 'dosutil.c'; else $(CYGPATH_W) '$(srcdir)/dosutil.c'; fi`

rott-dukemusc.o: dukemusc.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-dukemusc.o -MD -MP -MF $(DEPDIR)/rott-dukemusc.Tpo -c -o rott-dukemusc.o `test -f 'dukemusc.c' || echo '$(srcdir)/'`dukemusc.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-dukemusc.Tpo $(DEPDIR)/rott-dukemusc.Po
#	$(AM_V_CC)source='dukemusc.c' object='rott-dukemusc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-dukemusc.o `test -f 'dukemusc.c' || echo '$(srcdir)/'`dukemusc.c

rott-dukemusc.obj: dukemusc.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-dukemusc.obj -MD -MP -MF $(DEPDIR)/rott-dukemusc.Tpo -c -o rott-dukemusc.obj `if test -f 'dukemusc.c'; then $(CYGPATH_W) 'dukemusc.c'; else $(CYGPATH_W) '$(srcdir)/dukemusc.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-dukemusc.Tpo $(DEPDIR)/rott-dukemusc.Po
#	$(AM_V_CC)source='dukemusc.c' object='rott-dukemusc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-dukemusc.obj `if test -f 'dukemusc.c'; then $(CYGPATH_W) 'dukemusc.c'; else $(CYGPATH_W) '$(srcdir)/dukemusc.c'; fi`

rott-engine.o: engine.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-engine.o -MD -MP -MF $(DEPDIR)/rott-engine.Tpo -c -o rott-engine.o `test -f 'engine.c' || echo '$(srcdir)/'`engine.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-engine.Tpo $(DEPDIR)/rott-engine.Po
#	$(AM_V_CC)source='engine.c' object='rott-engine.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-engine.o `test -f 'engine.c' || echo '$(srcdir)/'`engine.c

rott-engine.obj: engine.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-engine.obj -MD -MP -MF $(DEPDIR)/rott-engine.Tpo -c -o rott-engine.obj `if test -f 'engine.c'; then $(CYGPATH_W) 'engine.c'; else $(CYGPATH_W) '$(srcdir)/engine.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-engine.Tpo $(DEPDIR)/rott-engine.Po
#	$(AM_V_CC)source='engine.c' object='rott-engine.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-engine.obj `if test -f 'engine.c'; then $(CYGPATH_W) 'engine.c'; else $(CYGPATH_W) '$(srcdir)/engine.c'; fi`

rott-isr.o: isr.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-isr.o -MD -MP -MF $(DEPDIR)/rott-isr.Tpo -c -o rott-isr.o `test -f 'isr.c' || echo '$(srcdir)/'`isr.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-isr.Tpo $(DEPDIR)/rott-isr.Po
#	$(AM_V_CC)source='isr.c' object='rott-isr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-isr.o `test -f 'isr.c' || echo '$(srcdir)/'`isr.c

rott-isr.obj: isr.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-isr.obj -MD -MP -MF $(DEPDIR)/rott-isr.Tpo -c -o rott-isr.obj `if test -f 'isr.c'; then $(CYGPATH_W) 'isr.c'; else $(CYGPATH_W) '$(srcdir)/isr.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-isr.Tpo $(DEPDIR)/rott-isr.Po
#	$(AM_V_CC)source='isr.c' object='rott-isr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-isr.obj `if test -f 'isr.c'; then $(CYGPATH_W) 'isr.c'; else $(CYGPATH_W) '$(srcdir)/isr.c'; fi`

rott-modexlib.o: modexlib.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-modexlib.o -MD -MP -MF $(DEPDIR)/rott-modexlib.Tpo -c -o rott-modexlib.o `test -f 'modexlib.c' || echo '$(srcdir)/'`modexlib.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-modexlib.Tpo $(DEPDIR)/rott-modexlib.Po
#	$(AM_V_CC)source='modexlib.c' object='rott-modexlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-modexlib.o `test -f 'modexlib.c' || echo '$(srcdir)/'`modexlib.c

rott-modexlib.obj: modexlib.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-modexlib.obj -MD -MP -MF $(DEPDIR)/rott-modexlib.Tpo -c -o rott-modexlib.obj `if test -f 'modexlib.c'; then $(CYGPATH_W) 'modexlib.c'; else $(CYGPATH_W) '$(srcdir)/modexlib.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-modexlib.Tpo $(DEPDIR)/rott-modexlib.Po
#	$(AM_V_CC)source='modexlib.c' object='rott-modexlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-modexlib.obj `if test -f 'modexlib.c'; then $(CYGPATH_W) 'modexlib.c'; else $(CYGPATH_W) '$(srcdir)/modexlib.c'; fi`

rott-rt_actor.o: rt_actor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_actor.o -MD -MP -MF $(DEPDIR)/rott-rt_actor.Tpo -c -o rott-rt_actor.o `test -f 'rt_actor.c' || echo '$(srcdir)/'`rt_actor.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_actor.Tpo $(DEPDIR)/rott-rt_actor.Po
#	$(AM_V_CC)source='rt_actor.c' object='rott-rt_actor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_actor.o `test -f 'rt_actor.c' || echo '$(srcdir)/'`rt_actor.c

rott-rt_actor.obj: rt_actor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_actor.obj -MD -MP -MF $(DEPDIR)/rott-rt_actor.Tpo -c -o rott-rt_actor.obj `if test -f 'rt_actor.c'; then $(CYGPATH_W) 'rt_actor.c'; else $(CYGPATH_W) '$(srcdir)/rt_actor.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_actor.Tpo $(DEPDIR)/rott-rt_actor.Po
#	$(AM_V_CC)source='rt_actor.c' object='rott-rt_actor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_actor.obj `if test -f 'rt_actor.c'; then $(CYGPATH_W) 'rt_actor.c'; else $(CYGPATH_W) '$(srcdir)/rt_actor.c'; fi`

rott-rt_battl.o: rt_battl.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_battl.o -MD -MP -MF $(DEPDIR)/rott-rt_battl.Tpo -c -o rott-rt_battl.o `test -f 'rt_battl.c' || echo '$(srcdir)/'`rt_battl.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_battl.Tpo $(DEPDIR)/rott-rt_battl.Po
#	$(AM_V_CC)source='rt_battl.c' object='rott-rt_battl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_battl.o `test -f 'rt_battl.c' || echo '$(srcdir)/'`rt_battl.c

rott-rt_battl.obj: rt_battl.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_battl.obj -MD -MP -MF $(DEPDIR)/rott-rt_battl.Tpo -c -o rott-rt_battl.obj `if test -f 'rt_battl.c'; then $(CYGPATH_W) 'rt_battl.c'; else $(CYGPATH_W) '$(srcdir)/rt_battl.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_battl.Tpo $(DEPDIR)/rott-rt_battl.Po
#	$(AM_V_CC)source='rt_battl.c' object='rott-rt_battl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_battl.obj `if test -f 'rt_battl.c'; then $(CYGPATH_W) 'rt_battl.c'; else $(CYGPATH_W) '$(srcdir)/rt_battl.c'; fi`

rott-rt_build.o: rt_build.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_build.o -MD -MP -MF $(DEPDIR)/rott-rt_build.Tpo -c -o rott-rt_build.o `test -f 'rt_build.c' || echo '$(srcdir)/'`rt_build.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_build.Tpo $(DEPDIR)/rott-rt_build.Po
#	$(AM_V_CC)source='rt_build.c' object='rott-rt_build.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_build.o `test -f 'rt_build.c' || echo '$(srcdir)/'`rt_build.c

rott-rt_build.obj: rt_build.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_build.obj -MD -MP -MF $(DEPDIR)/rott-rt_build.Tpo -c -o rott-rt_build.obj `if test -f 'rt_build.c'; then $(CYGPATH_W) 'rt_build.c'; else $(CYGPATH_W) '$(srcdir)/rt_build.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_build.Tpo $(DEPDIR)/rott-rt_build.Po
#	$(AM_V_CC)source='rt_build.c' object='rott-rt_build.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_build.obj `if test -f 'rt_build.c'; then $(CYGPATH_W) 'rt_build.c'; else $(CYGPATH_W) '$(srcdir)/rt_build.c'; fi`

rott-rt_cfg.o: rt_cfg.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_cfg.o -MD -MP -MF $(DEPDIR)/rott-rt_cfg.Tpo -c -o rott-rt_cfg.o `test -f 'rt_cfg.c' || echo '$(srcdir)/'`rt_cfg.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_cfg.Tpo $(DEPDIR)/rott-rt_cfg.Po
#	$(AM_V_CC)source='rt_cfg.c' object='rott-rt_cfg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_cfg.o `test -f 'rt_cfg.c' || echo '$(srcdir)/'`rt_cfg.c

rott-rt_cfg.obj: rt_cfg.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_cfg.obj -MD -MP -MF $(DEPDIR)/rott-rt_cfg.Tpo -c -o rott-rt_cfg.obj `if test -f 'rt_cfg.c'; then $(CYGPATH_W) 'rt_cfg.c'; else $(CYGPATH_W) '$(srcdir)/rt_cfg.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_cfg.Tpo $(DEPDIR)/rott-rt_cfg.Po
#	$(AM_V_CC)source='rt_cfg.c' object='rott-rt_cfg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_cfg.obj `if test -f 'rt_cfg.c'; then $(CYGPATH_W) 'rt_cfg.c'; else $(CYGPATH_W) '$(srcdir)/rt_cfg.c'; fi`

rott-rt_com.o: rt_com.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_com.o -MD -MP -MF $(DEPDIR)/rott-rt_com.Tpo -c -o rott-rt_com.o `test -f 'rt_com.c' || echo '$(srcdir)/'`rt_com.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_com.Tpo $(DEPDIR)/rott-rt_com.Po
#	$(AM_V_CC)source='rt_com.c' object='rott-rt_com.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_com.o `test -f 'rt_com.c' || echo '$(srcdir)/'`rt_com.c

rott-rt_com.obj: rt_com.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_com.obj -MD -MP -MF $(DEPDIR)/rott-rt_com.Tpo -c -o rott-rt_com.obj `if test -f 'rt_com.c'; then $(CYGPATH_W) 'rt_com.c'; else $(CYGPATH_W) '$(srcdir)/rt_com.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_com.Tpo $(DEPDIR)/rott-rt_com.Po
#	$(AM_V_CC)source='rt_com.c' object='rott-rt_com.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_com.obj `if test -f 'rt_com.c'; then $(CYGPATH_W) 'rt_com.c'; else $(CYGPATH_W) '$(srcdir)/rt_com.c'; fi`

rott-rt_crc.o: rt_crc.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_crc.o -MD -MP -MF $(DEPDIR)/rott-rt_crc.Tpo -c -o rott-rt_crc.o `test -f 'rt_crc.c' || echo '$(srcdir)/'`rt_crc.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_crc.Tpo $(DEPDIR)/rott-rt_crc.Po
#	$(AM_V_CC)source='rt_crc.c' object='rott-rt_crc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_crc.o `test -f 'rt_crc.c' || echo '$(srcdir)/'`rt_crc.c

rott-rt_crc.obj: rt_crc.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_crc.obj -MD -MP -MF $(DEPDIR)/rott-rt_crc.Tpo -c -o rott-rt_crc.obj `if test -f 'rt_crc.c'; then $(CYGPATH_W) 'rt_crc.c'; else $(CYGPATH_W) '$(srcdir)/rt_crc.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_crc.Tpo $(DEPDIR)/rott-rt_crc.Po
#	$(AM_V_CC)source='rt_crc.c' object='rott-rt_crc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_crc.obj `if test -f 'rt_crc.c'; then $(CYGPATH_W) 'rt_crc.c'; else $(CYGPATH_W) '$(srcdir)/rt_crc.c'; fi`

rott-rt_debug.o: rt_debug.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_debug.o -MD -MP -MF $(DEPDIR)/rott-rt_debug.Tpo -c -o rott-rt_debug.o `test -f 'rt_debug.c' || echo '$(srcdir)/'`rt_debug.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_debug.Tpo $(DEPDIR)/rott-rt_debug.Po
#	$(AM_V_CC)source='rt_debug.c' object='rott-rt_debug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_debug.o `test -f 'rt_debug.c' || echo '$(srcdir)/'`rt_debug.c

rott-rt_debug.obj: rt_debug.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_debug.obj -MD -MP -MF $(DEPDIR)/rott-rt_debug.Tpo -c -o rott-rt_debug.obj `if test -f 'rt_debug.c'; then $(CYGPATH_W) 'rt_debug.c'; else $(CYGPATH_W) '$(srcdir)/rt_debug.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_debug.Tpo $(DEPDIR)/rott-rt_debug.Po
#	$(AM_V_CC)source='rt_debug.c' object='rott-rt_debug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_debug.obj `if test -f 'rt_debug.c'; then $(CYGPATH_W) 'rt_debug.c'; else $(CYGPATH_W) '$(srcdir)/rt_debug.c'; fi`

rott-rt_dmand.o: rt_dmand.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_dmand.o -MD -MP -MF $(DEPDIR)/rott-rt_dmand.Tpo -c -o rott-rt_dmand.o `test -f 'rt_dmand.c' || echo '$(srcdir)/'`rt_dmand.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_dmand.Tpo $(DEPDIR)/rott-rt_dmand.Po
#	$(AM_V_CC)source='rt_dmand.c' object='rott-rt_dmand.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_dmand.o `test -f 'rt_dmand.c' || echo '$(srcdir)/'`rt_dmand.c

rott-rt_dmand.obj: rt_dmand.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_dmand.obj -MD -MP -MF $(DEPDIR)/rott-rt_dmand.Tpo -c -o rott-rt_dmand.obj `if test -f 'rt_dmand.c'; then $(CYGPATH_W) 'rt_dmand.c'; else $(CYGPATH_W) '$(srcdir)/rt_dmand.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_dmand.Tpo $(DEPDIR)/rott-rt_dmand.Po
#	$(AM_V_CC)source='rt_dmand.c' object='rott-rt_dmand.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_dmand.obj `if test -f 'rt_dmand.c'; then $(CYGPATH_W) 'rt_dmand.c'; else $(CYGPATH_W) '$(srcdir)/rt_dmand.c'; fi`

rott-rt_door.o: rt_door.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_door.o -MD -MP -MF $(DEPDIR)/rott-rt_door.Tpo -c -o rott-rt_door.o `test -f 'rt_door.c' || echo '$(srcdir)/'`rt_door.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_door.Tpo $(DEPDIR)/rott-rt_door.Po
#	$(AM_V_CC)source='rt_door.c' object='rott-rt_door.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_door.o `test -f 'rt_door.c' || echo '$(srcdir)/'`rt_door.c

rott-rt_door.obj: rt_door.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_door.obj -MD -MP -MF $(DEPDIR)/rott-rt_door.Tpo -c -o rott-rt_door.obj `if test -f 'rt_door.c'; then $(CYGPATH_W) 'rt_door.c'; else $(CYGPATH_W) '$(srcdir)/rt_door.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_door.Tpo $(DEPDIR)/rott-rt_door.Po
#	$(AM_V_CC)source='rt_door.c' object='rott-rt_door.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_door.obj `if test -f 'rt_door.c'; then $(CYGPATH_W) 'rt_door.c'; else $(CYGPATH_W) '$(srcdir)/rt_door.c'; fi`

rott-rt_draw.o: rt_draw.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_draw.o -MD -MP -MF $(DEPDIR)/rott-rt_draw.Tpo -c -o rott-rt_draw.o `test -f 'rt_draw.c' || echo '$(srcdir)/'`rt_draw.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_draw.Tpo $(DEPDIR)/rott-rt_draw.Po
#	$(AM_V_CC)source='rt_draw.c' object='rott-rt_draw.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_draw.o `test -f 'rt_draw.c' || echo '$(srcdir)/'`rt_draw.c

rott-rt_draw.obj: rt_draw.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_draw.obj -MD -MP -MF $(DEPDIR)/rott-rt_draw.Tpo -c -o rott-rt_draw.obj `if test -f 'rt_draw.c'; then $(CYGPATH_W) 'rt_draw.c'; else $(CYGPATH_W) '$(srcdir)/rt_draw.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_draw.Tpo $(DEPDIR)/rott-rt_draw.Po
#	$(AM_V_CC)source='rt_draw.c' object='rott-rt_draw.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_draw.obj `if test -f 'rt_draw.c'; then $(CYGPATH_W) 'rt_draw.c'; else $(CYGPATH_W) '$(srcdir)/rt_draw.c'; fi`

rott-rt_err.o: rt_err.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_err.o -MD -MP -MF $(DEPDIR)/rott-rt_err.Tpo -c -o rott-rt_err.o `test -f 'rt_err.c' || echo '$(srcdir)/'`rt_err.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_err.Tpo $(DEPDIR)/rott-rt_err.Po
#	$(AM_V_CC)source='rt_err.c' object='rott-rt_err.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_err.o `test -f 'rt_err.c' || echo '$(srcdir)/'`rt_err.c

rott-rt_err.obj: rt_err.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_err.obj -MD -MP -MF $(DEPDIR)/rott-rt_err.Tpo -c -o rott-rt_err.obj `if test -f 'rt_err.c'; then $(CYGPATH_W) 'rt_err.c'; else $(CYGPATH_W) '$(srcdir)/rt_err.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_err.Tpo $(DEPDIR)/rott-rt_err.Po
#	$(AM_V_CC)source='rt_err.c' object='rott-rt_err.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_err.obj `if test -f 'rt_err.c'; then $(CYGPATH_W) 'rt_err.c'; else $(CYGPATH_W) '$(srcdir)/rt_err.c'; fi`

rott-rt_floor.o: rt_floor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_floor.o -MD -MP -MF $(DEPDIR)/rott-rt_floor.Tpo -c -o rott-rt_floor.o `test -f 'rt_floor.c' || echo '$(srcdir)/'`rt_floor.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_floor.Tpo $(DEPDIR)/rott-rt_floor.Po
#	$(AM_V_CC)source='rt_floor.c' object='rott-rt_floor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_floor.o `test -f 'rt_floor.c' || echo '$(srcdir)/'`rt_floor.c

rott-rt_floor.obj: rt_floor.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_floor.obj -MD -MP -MF $(DEPDIR)/rott-rt_floor.Tpo -c -o rott-rt_floor.obj `if test -f 'rt_floor.c'; then $(CYGPATH_W) 'rt_floor.c'; else $(CYGPATH_W) '$(srcdir)/rt_floor.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_floor.Tpo $(DEPDIR)/rott-rt_floor.Po
#	$(AM_V_CC)source='rt_floor.c' object='rott-rt_floor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_floor.obj `if test -f 'rt_floor.c'; then $(CYGPATH_W) 'rt_floor.c'; else $(CYGPATH_W) '$(srcdir)/rt_floor.c'; fi`

rott-rt_game.o: rt_game.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_game.o -MD -MP -MF $(DEPDIR)/rott-rt_game.Tpo -c -o rott-rt_game.o `test -f 'rt_game.c' || echo '$(srcdir)/'`rt_game.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_game.Tpo $(DEPDIR)/rott-rt_game.Po
#	$(AM_V_CC)source='rt_game.c' object='rott-rt_game.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_game.o `test -f 'rt_game.c' || echo '$(srcdir)/'`rt_game.c

rott-rt_game.obj: rt_game.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_game.obj -MD -MP -MF $(DEPDIR)/rott-rt_game.Tpo -c -o rott-rt_game.obj `if test -f 'rt_game.c'; then $(CYGPATH_W) 'rt_game.c'; else $(CYGPATH_W) '$(srcdir)/rt_game.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_game.Tpo $(DEPDIR)/rott-rt_game.Po
#	$(AM_V_CC)source='rt_game.c' object='rott-rt_game.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_game.obj `if test -f 'rt_game.c'; then $(CYGPATH_W) 'rt_game.c'; else $(CYGPATH_W) '$(srcdir)/rt_game.c'; fi`

rott-rt_in.o: rt_in.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_in.o -MD -MP -MF $(DEPDIR)/rott-rt_in.Tpo -c -o rott-rt_in.o `test -f 'rt_in.c' || echo '$(srcdir)/'`rt_in.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_in.Tpo $(DEPDIR)/rott-rt_in.Po
#	$(AM_V_CC)source='rt_in.c' object='rott-rt_in.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_in.o `test -f 'rt_in.c' || echo '$(srcdir)/'`rt_in.c

rott-rt_in.obj: rt_in.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_in.obj -MD -MP -MF $(DEPDIR)/rott-rt_in.Tpo -c -o rott-rt_in.obj `if test -f 'rt_in.c'; then $(CYGPATH_W) 'rt_in.c'; else $(CYGPATH_W) '$(srcdir)/rt_in.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_in.Tpo $(DEPDIR)/rott-rt_in.Po
#	$(AM_V_CC)source='rt_in.c' object='rott-rt_in.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_in.obj `if test -f 'rt_in.c'; then $(CYGPATH_W) 'rt_in.c'; else $(CYGPATH_W) '$(srcdir)/rt_in.c'; fi`

rott-rt_main.o: rt_main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_main.o -MD -MP -MF $(DEPDIR)/rott-rt_main.Tpo -c -o rott-rt_main.o `test -f 'rt_main.c' || echo '$(srcdir)/'`rt_main.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_main.Tpo $(DEPDIR)/rott-rt_main.Po
#	$(AM_V_CC)source='rt_main.c' object='rott-rt_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_main.o `test -f 'rt_main.c' || echo '$(srcdir)/'`rt_main.c

rott-rt_main.obj: rt_main.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_main.obj -MD -MP -MF $(DEPDIR)/rott-rt_main.Tpo -c -o rott-rt_main.obj `if test -f 'rt_main.c'; then $(CYGPATH_W) 'rt_main.c'; else $(CYGPATH_W) '$(srcdir)/rt_main.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_main.Tpo $(DEPDIR)/rott-rt_main.Po
#	$(AM_V_CC)source='rt_main.c' object='rott-rt_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_main.obj `if test -f 'rt_main.c'; then $(CYGPATH_W) 'rt_main.c'; else $(CYGPATH_W) '$(srcdir)/rt_main.c'; fi`

rott-rt_map.o: rt_map.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_map.o -MD -MP -MF $(DEPDIR)/rott-rt_map.Tpo -c -o rott-rt_map.o `test -f 'rt_map.c' || echo '$(srcdir)/'`rt_map.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_map.Tpo $(DEPDIR)/rott-rt_map.Po
#	$(AM_V_CC)source='rt_map.c' object='rott-rt_map.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_map.o `test -f 'rt_map.c' || echo '$(srcdir)/'`rt_map.c

rott-rt_map.obj: rt_map.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_map.obj -MD -MP -MF $(DEPDIR)/rott-rt_map.Tpo -c -o rott-rt_map.obj `if test -f 'rt_map.c'; then $(CYGPATH_W) 'rt_map.c'; else $(CYGPATH_W) '$(srcdir)/rt_map.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_map.Tpo $(DEPDIR)/rott-rt_map.Po
#	$(AM_V_CC)source='rt_map.c' object='rott-rt_map.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_map.obj `if test -f 'rt_map.c'; then $(CYGPATH_W) 'rt_map.c'; else $(CYGPATH_W) '$(srcdir)/rt_map.c'; fi`

rott-rt_menu.o: rt_menu.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_menu.o -MD -MP -MF $(DEPDIR)/rott-rt_menu.Tpo -c -o rott-rt_menu.o `test -f 'rt_menu.c' || echo '$(srcdir)/'`rt_menu.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_menu.Tpo $(DEPDIR)/rott-rt_menu.Po
#	$(AM_V_CC)source='rt_menu.c' object='rott-rt_menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_menu.o `test -f 'rt_menu.c' || echo '$(srcdir)/'`rt_menu.c

rott-rt_menu.obj: rt_menu.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_menu.obj -MD -MP -MF $(DEPDIR)/rott-rt_menu.Tpo -c -o rott-rt_menu.obj `if test -f 'rt_menu.c'; then $(CYGPATH_W) 'rt_menu.c'; else $(CYGPATH_W) '$(srcdir)/rt_menu.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_menu.Tpo $(DEPDIR)/rott-rt_menu.Po
#	$(AM_V_CC)source='rt_menu.c' object='rott-rt_menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_menu.obj `if test -f 'rt_menu.c'; then $(CYGPATH_W) 'rt_menu.c'; else $(CYGPATH_W) '$(srcdir)/rt_menu.c'; fi`

rott-rt_msg.o: rt_msg.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_msg.o -MD -MP -MF $(DEPDIR)/rott-rt_msg.Tpo -c -o rott-rt_msg.o `test -f 'rt_msg.c' || echo '$(srcdir)/'`rt_msg.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_msg.Tpo $(DEPDIR)/rott-rt_msg.Po
#	$(AM_V_CC)source='rt_msg.c' object='rott-rt_msg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_msg.o `test -f 'rt_msg.c' || echo '$(srcdir)/'`rt_msg.c

rott-rt_msg.obj: rt_msg.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_msg.obj -MD -MP -MF $(DEPDIR)/rott-rt_msg.Tpo -c -o rott-rt_msg.obj `if test -f 'rt_msg.c'; then $(CYGPATH_W) 'rt_msg.c'; else $(CYGPATH_W) '$(srcdir)/rt_msg.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_msg.Tpo $(DEPDIR)/rott-rt_msg.Po
#	$(AM_V_CC)source='rt_msg.c' object='rott-rt_msg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_msg.obj `if test -f 'rt_msg.c'; then $(CYGPATH_W) 'rt_msg.c'; else $(CYGPATH_W) '$(srcdir)/rt_msg.c'; fi`

rott-rt_net.o: rt_net.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_net.o -MD -MP -MF $(DEPDIR)/rott-rt_net.Tpo -c -o rott-rt_net.o `test -f 'rt_net.c' || echo '$(srcdir)/'`rt_net.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_net.Tpo $(DEPDIR)/rott-rt_net.Po
#	$(AM_V_CC)source='rt_net.c' object='rott-rt_net.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_net.o `test -f 'rt_net.c' || echo '$(srcdir)/'`rt_net.c

rott-rt_net.obj: rt_net.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_net.obj -MD -MP -MF $(DEPDIR)/rott-rt_net.Tpo -c -o rott-rt_net.obj `if test -f 'rt_net.c'; then $(CYGPATH_W) 'rt_net.c'; else $(CYGPATH_W) '$(srcdir)/rt_net.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_net.Tpo $(DEPDIR)/rott-rt_net.Po
#	$(AM_V_CC)source='rt_net.c' object='rott-rt_net.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_net.obj `if test -f 'rt_net.c'; then $(CYGPATH_W) 'rt_net.c'; else $(CYGPATH_W) '$(srcdir)/rt_net.c'; fi`

rott-rt_playr.o: rt_playr.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_playr.o -MD -MP -MF $(DEPDIR)/rott-rt_playr.Tpo -c -o rott-rt_playr.o `test -f 'rt_playr.c' || echo '$(srcdir)/'`rt_playr.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_playr.Tpo $(DEPDIR)/rott-rt_playr.Po
#	$(AM_V_CC)source='rt_playr.c' object='rott-rt_playr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_playr.o `test -f 'rt_playr.c' || echo '$(srcdir)/'`rt_playr.c

rott-rt_playr.obj: rt_playr.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_playr.obj -MD -MP -MF $(DEPDIR)/rott-rt_playr.Tpo -c -o rott-rt_playr.obj `if test -f 'rt_playr.c'; then $(CYGPATH_W) 'rt_playr.c'; else $(CYGPATH_W) '$(srcdir)/rt_playr.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_playr.Tpo $(DEPDIR)/rott-rt_playr.Po
#	$(AM_V_CC)source='rt_playr.c' object='rott-rt_playr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_playr.obj `if test -f 'rt_playr.c'; then $(CYGPATH_W) 'rt_playr.c'; else $(CYGPATH_W) '$(srcdir)/rt_playr.c'; fi`

rott-rt_rand.o: rt_rand.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_rand.o -MD -MP -MF $(DEPDIR)/rott-rt_rand.Tpo -c -o rott-rt_rand.o `test -f 'rt_rand.c' || echo '$(srcdir)/'`rt_rand.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_rand.Tpo $(DEPDIR)/rott-rt_rand.Po
#	$(AM_V_CC)source='rt_rand.c' object='rott-rt_rand.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_rand.o `test -f 'rt_rand.c' || echo '$(srcdir)/'`rt_rand.c

rott-rt_rand.obj: rt_rand.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_rand.obj -MD -MP -MF $(DEPDIR)/rott-rt_rand.Tpo -c -o rott-rt_rand.obj `if test -f 'rt_rand.c'; then $(CYGPATH_W) 'rt_rand.c'; else $(CYGPATH_W) '$(srcdir)/rt_rand.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_rand.Tpo $(DEPDIR)/rott-rt_rand.Po
#	$(AM_V_CC)source='rt_rand.c' object='rott-rt_rand.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_rand.obj `if test -f 'rt_rand.c'; then $(CYGPATH_W) 'rt_rand.c'; else $(CYGPATH_W) '$(srcdir)/rt_rand.c'; fi`

rott-rt_scale.o: rt_scale.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_scale.o -MD -MP -MF $(DEPDIR)/rott-rt_scale.Tpo -c -o rott-rt_scale.o `test -f 'rt_scale.c' || echo '$(srcdir)/'`rt_scale.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_scale.Tpo $(DEPDIR)/rott-rt_scale.Po
#	$(AM_V_CC)source='rt_scale.c' object='rott-rt_scale.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_scale.o `test -f 'rt_scale.c' || echo '$(srcdir)/'`rt_scale.c

rott-rt_scale.obj: rt_scale.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_scale.obj -MD -MP -MF $(DEPDIR)/rott-rt_scale.Tpo -c -o rott-rt_scale.obj `if test -f 'rt_scale.c'; then $(CYGPATH_W) 'rt_scale.c'; else $(CYGPATH_W) '$(srcdir)/rt_scale.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_scale.Tpo $(DEPDIR)/rott-rt_scale.Po
#	$(AM_V_CC)source='rt_scale.c' object='rott-rt_scale.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_scale.obj `if test -f 'rt_scale.c'; then $(CYGPATH_W) 'rt_scale.c'; else $(CYGPATH_W) '$(srcdir)/rt_scale.c'; fi`

rott-rt_sound.o: rt_sound.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_sound.o -MD -MP -MF $(DEPDIR)/rott-rt_sound.Tpo -c -o rott-rt_sound.o `test -f 'rt_sound.c' || echo '$(srcdir)/'`rt_sound.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_sound.Tpo $(DEPDIR)/rott-rt_sound.Po
#	$(AM_V_CC)source='rt_sound.c' object='rott-rt_sound.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_sound.o `test -f 'rt_sound.c' || echo '$(srcdir)/'`rt_sound.c

rott-rt_sound.obj: rt_sound.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_sound.obj -MD -MP -MF $(DEPDIR)/rott-rt_sound.Tpo -c -o rott-rt_sound.obj `if test -f 'rt_sound.c'; then $(CYGPATH_W) 'rt_sound.c'; else $(CYGPATH_W) '$(srcdir)/rt_sound.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_sound.Tpo $(DEPDIR)/rott-rt_sound.Po
#	$(AM_V_CC)source='rt_sound.c' object='rott-rt_sound.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_sound.obj `if test -f 'rt_sound.c'; then $(CYGPATH_W) 'rt_sound.c'; else $(CYGPATH_W) '$(srcdir)/rt_sound.c'; fi`

rott-rt_spbal.o: rt_spbal.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_spbal.o -MD -MP -MF $(DEPDIR)/rott-rt_spbal.Tpo -c -o rott-rt_spbal.o `test -f 'rt_spbal.c' || echo '$(srcdir)/'`rt_spbal.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_spbal.Tpo $(DEPDIR)/rott-rt_spbal.Po
#	$(AM_V_CC)source='rt_spbal.c' object='rott-rt_spbal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_spbal.o `test -f 'rt_spbal.c' || echo '$(srcdir)/'`rt_spbal.c

rott-rt_spbal.obj: rt_spbal.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_spbal.obj -MD -MP -MF $(DEPDIR)/rott-rt_spbal.Tpo -c -o rott-rt_spbal.obj `if test -f 'rt_spbal.c'; then $(CYGPATH_W) 'rt_spbal.c'; else $(CYGPATH_W) '$(srcdir)/rt_spbal.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_spbal.Tpo $(DEPDIR)/rott-rt_spbal.Po
#	$(AM_V_CC)source='rt_spbal.c' object='rott-rt_spbal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_spbal.obj `if test -f 'rt_spbal.c'; then $(CYGPATH_W) 'rt_spbal.c'; else $(CYGPATH_W) '$(srcdir)/rt_spbal.c'; fi`

rott-rt_sqrt.o: rt_sqrt.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_sqrt.o -MD -MP -MF $(DEPDIR)/rott-rt_sqrt.Tpo -c -o rott-rt_sqrt.o `test -f 'rt_sqrt.c' || echo '$(srcdir)/'`rt_sqrt.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_sqrt.Tpo $(DEPDIR)/rott-rt_sqrt.Po
#	$(AM_V_CC)source='rt_sqrt.c' object='rott-rt_sqrt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_sqrt.o `test -f 'rt_sqrt.c' || echo '$(srcdir)/'`rt_sqrt.c

rott-rt_sqrt.obj: rt_sqrt.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_sqrt.obj -MD -MP -MF $(DEPDIR)/rott-rt_sqrt.Tpo -c -o rott-rt_sqrt.obj `if test -f 'rt_sqrt.c'; then $(CYGPATH_W) 'rt_sqrt.c'; else $(CYGPATH_W) '$(srcdir)/rt_sqrt.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_sqrt.Tpo $(DEPDIR)/rott-rt_sqrt.Po
#	$(AM_V_CC)source='rt_sqrt.c' object='rott-rt_sqrt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_sqrt.obj `if test -f 'rt_sqrt.c'; then $(CYGPATH_W) 'rt_sqrt.c'; else $(CYGPATH_W) '$(srcdir)/rt_sqrt.c'; fi`

rott-rt_stat.o: rt_stat.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_stat.o -MD -MP -MF $(DEPDIR)/rott-rt_stat.Tpo -c -o rott-rt_stat.o `test -f 'rt_stat.c' || echo '$(srcdir)/'`rt_stat.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_stat.Tpo $(DEPDIR)/rott-rt_stat.Po
#	$(AM_V_CC)source='rt_stat.c' object='rott-rt_stat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_stat.o `test -f 'rt_stat.c' || echo '$(srcdir)/'`rt_stat.c

rott-rt_stat.obj: rt_stat.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_stat.obj -MD -MP -MF $(DEPDIR)/rott-rt_stat.Tpo -c -o rott-rt_stat.obj `if test -f 'rt_stat.c'; then $(CYGPATH_W) 'rt_stat.c'; else $(CYGPATH_W) '$(srcdir)/rt_stat.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_stat.Tpo $(DEPDIR)/rott-rt_stat.Po
#	$(AM_V_CC)source='rt_stat.c' object='rott-rt_stat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_stat.obj `if test -f 'rt_stat.c'; then $(CYGPATH_W) 'rt_stat.c'; else $(CYGPATH_W) '$(srcdir)/rt_stat.c'; fi`

rott-rt_state.o: rt_state.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_state.o -MD -MP -MF $(DEPDIR)/rott-rt_state.Tpo -c -o rott-rt_state.o `test -f 'rt_state.c' || echo '$(srcdir)/'`rt_state.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_state.Tpo $(DEPDIR)/rott-rt_state.Po
#	$(AM_V_CC)source='rt_state.c' object='rott-rt_state.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_state.o `test -f 'rt_state.c' || echo '$(srcdir)/'`rt_state.c

rott-rt_state.obj: rt_state.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_state.obj -MD -MP -MF $(DEPDIR)/rott-rt_state.Tpo -c -o rott-rt_state.obj `if test -f 'rt_state.c'; then $(CYGPATH_W) 'rt_state.c'; else $(CYGPATH_W) '$(srcdir)/rt_state.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_state.Tpo $(DEPDIR)/rott-rt_state.Po
#	$(AM_V_CC)source='rt_state.c' object='rott-rt_state.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_state.obj `if test -f 'rt_state.c'; then $(CYGPATH_W) 'rt_state.c'; else $(CYGPATH_W) '$(srcdir)/rt_state.c'; fi`

rott-rt_str.o: rt_str.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_str.o -MD -MP -MF $(DEPDIR)/rott-rt_str.Tpo -c -o rott-rt_str.o `test -f 'rt_str.c' || echo '$(srcdir)/'`rt_str.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_str.Tpo $(DEPDIR)/rott-rt_str.Po
#	$(AM_V_CC)source='rt_str.c' object='rott-rt_str.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_str.o `test -f 'rt_str.c' || echo '$(srcdir)/'`rt_str.c

rott-rt_str.obj: rt_str.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_str.obj -MD -MP -MF $(DEPDIR)/rott-rt_str.Tpo -c -o rott-rt_str.obj `if test -f 'rt_str.c'; then $(CYGPATH_W) 'rt_str.c'; else $(CYGPATH_W) '$(srcdir)/rt_str.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_str.Tpo $(DEPDIR)/rott-rt_str.Po
#	$(AM_V_CC)source='rt_str.c' object='rott-rt_str.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_str.obj `if test -f 'rt_str.c'; then $(CYGPATH_W) 'rt_str.c'; else $(CYGPATH_W) '$(srcdir)/rt_str.c'; fi`

rott-rt_swift.o: rt_swift.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_swift.o -MD -MP -MF $(DEPDIR)/rott-rt_swift.Tpo -c -o rott-rt_swift.o `test -f 'rt_swift.c' || echo '$(srcdir)/'`rt_swift.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_swift.Tpo $(DEPDIR)/rott-rt_swift.Po
#	$(AM_V_CC)source='rt_swift.c' object='rott-rt_swift.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_swift.o `test -f 'rt_swift.c' || echo '$(srcdir)/'`rt_swift.c

rott-rt_swift.obj: rt_swift.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_swift.obj -MD -MP -MF $(DEPDIR)/rott-rt_swift.Tpo -c -o rott-rt_swift.obj `if test -f 'rt_swift.c'; then $(CYGPATH_W) 'rt_swift.c'; else $(CYGPATH_W) '$(srcdir)/rt_swift.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_swift.Tpo $(DEPDIR)/rott-rt_swift.Po
#	$(AM_V_CC)source='rt_swift.c' object='rott-rt_swift.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_swift.obj `if test -f 'rt_swift.c'; then $(CYGPATH_W) 'rt_swift.c'; else $(CYGPATH_W) '$(srcdir)/rt_swift.c'; fi`

rott-rt_ted.o: rt_ted.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_ted.o -MD -MP -MF $(DEPDIR)/rott-rt_ted.Tpo -c -o rott-rt_ted.o `test -f 'rt_ted.c' || echo '$(srcdir)/'`rt_ted.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_ted.Tpo $(DEPDIR)/rott-rt_ted.Po
#	$(AM_V_CC)source='rt_ted.c' object='rott-rt_ted.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_ted.o `test -f 'rt_ted.c' || echo '$(srcdir)/'`rt_ted.c

rott-rt_ted.obj: rt_ted.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_ted.obj -MD -MP -MF $(DEPDIR)/rott-rt_ted.Tpo -c -o rott-rt_ted.obj `if test -f 'rt_ted.c'; then $(CYGPATH_W) 'rt_ted.c'; else $(CYGPATH_W) '$(srcdir)/rt_ted.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_ted.Tpo $(DEPDIR)/rott-rt_ted.Po
#	$(AM_V_CC)source='rt_ted.c' object='rott-rt_ted.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_ted.obj `if test -f 'rt_ted.c'; then $(CYGPATH_W) 'rt_ted.c'; else $(CYGPATH_W) '$(srcdir)/rt_ted.c'; fi`

rott-rt_util.o: rt_util.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_util.o -MD -MP -MF $(DEPDIR)/rott-rt_util.Tpo -c -o rott-rt_util.o `test -f 'rt_util.c' || echo '$(srcdir)/'`rt_util.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_util.Tpo $(DEPDIR)/rott-rt_util.Po
#	$(AM_V_CC)source='rt_util.c' object='rott-rt_util.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_util.o `test -f 'rt_util.c' || echo '$(srcdir)/'`rt_util.c

rott-rt_util.obj: rt_util.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_util.obj -MD -MP -MF $(DEPDIR)/rott-rt_util.Tpo -c -o rott-rt_util.obj `if test -f 'rt_util.c'; then $(CYGPATH_W) 'rt_util.c'; else $(CYGPATH_W) '$(srcdir)/rt_util.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_util.Tpo $(DEPDIR)/rott-rt_util.Po
#	$(AM_V_CC)source='rt_util.c' object='rott-rt_util.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_util.obj `if test -f 'rt_util.c'; then $(CYGPATH_W) 'rt_util.c'; else $(CYGPATH_W) '$(srcdir)/rt_util.c'; fi`

rott-rt_vid.o: rt_vid.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_vid.o -MD -MP -MF $(DEPDIR)/rott-rt_vid.Tpo -c -o rott-rt_vid.o `test -f 'rt_vid.c' || echo '$(srcdir)/'`rt_vid.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_vid.Tpo $(DEPDIR)/rott-rt_vid.Po
#	$(AM_V_CC)source='rt_vid.c' object='rott-rt_vid.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_vid.o `test -f 'rt_vid.c' || echo '$(srcdir)/'`rt_vid.c

rott-rt_vid.obj: rt_vid.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_vid.obj -MD -MP -MF $(DEPDIR)/rott-rt_vid.Tpo -c -o rott-rt_vid.obj `if test -f 'rt_vid.c'; then $(CYGPATH_W) 'rt_vid.c'; else $(CYGPATH_W) '$(srcdir)/rt_vid.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_vid.Tpo $(DEPDIR)/rott-rt_vid.Po
#	$(AM_V_CC)source='rt_vid.c' object='rott-rt_vid.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_vid.obj `if test -f 'rt_vid.c'; then $(CYGPATH_W) 'rt_vid.c'; else $(CYGPATH_W) '$(srcdir)/rt_vid.c'; fi`

rott-rt_view.o: rt_view.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_view.o -MD -MP -MF $(DEPDIR)/rott-rt_view.Tpo -c -o rott-rt_view.o `test -f 'rt_view.c' || echo '$(srcdir)/'`rt_view.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_view.Tpo $(DEPDIR)/rott-rt_view.Po
#	$(AM_V_CC)source='rt_view.c' object='rott-rt_view.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_view.o `test -f 'rt_view.c' || echo '$(srcdir)/'`rt_view.c

rott-rt_view.obj: rt_view.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-rt_view.obj -MD -MP -MF $(DEPDIR)/rott-rt_view.Tpo -c -o rott-rt_view.obj `if test -f 'rt_view.c'; then $(CYGPATH_W) 'rt_view.c'; else $(CYGPATH_W) '$(srcdir)/rt_view.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_view.Tpo $(DEPDIR)/rott-rt_view.Po
#	$(AM_V_CC)source='rt_view.c' object='rott-rt_view.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-rt_view.obj `if test -f 'rt_view.c'; then $(CYGPATH_W) 'rt_view.c'; else $(CYGPATH_W) '$(srcdir)/rt_view.c'; fi`

rott-scriplib.o: scriplib.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-scriplib.o -MD -MP -MF $(DEPDIR)/rott-scriplib.Tpo -c -o rott-scriplib.o `test -f 'scriplib.c' || echo '$(srcdir)/'`scriplib.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-scriplib.Tpo $(DEPDIR)/rott-scriplib.Po
#	$(AM_V_CC)source='scriplib.c' object='rott-scriplib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-scriplib.o `test -f 'scriplib.c' || echo '$(srcdir)/'`scriplib.c

rott-scriplib.obj: scriplib.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-scriplib.obj -MD -MP -MF $(DEPDIR)/rott-scriplib.Tpo -c -o rott-scriplib.obj `if test -f 'scriplib.c'; then $(CYGPATH_W) 'scriplib.c'; else $(CYGPATH_W) '$(srcdir)/scriplib.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-scriplib.Tpo $(DEPDIR)/rott-scriplib.Po
#	$(AM_V_CC)source='scriplib.c' object='rott-scriplib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-scriplib.obj `if test -f 'scriplib.c'; then $(CYGPATH_W) 'scriplib.c'; else $(CYGPATH_W) '$(srcdir)/scriplib.c'; fi`

rott-watcom.o: watcom.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-watcom.o -MD -MP -MF $(DEPDIR)/rott-watcom.Tpo -c -o rott-watcom.o `test -f 'watcom.c' || echo '$(srcdir)/'`watcom.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-watcom.Tpo $(DEPDIR)/rott-watcom.Po
#	$(AM_V_CC)source='watcom.c' object='rott-watcom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-watcom.o `test -f 'watcom.c' || echo '$(srcdir)/'`watcom.c

rott-watcom.obj: watcom.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-watcom.obj -MD -MP -MF $(DEPDIR)/rott-watcom.Tpo -c -o rott-watcom.obj `if test -f 'watcom.c'; then $(CYGPATH_W) 'watcom.c'; else $(CYGPATH_W) '$(srcdir)/watcom.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-watcom.Tpo $(DEPDIR)/rott-watcom.Po
#	$(AM_V_CC)source='watcom.c' object='rott-watcom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-watcom.obj `if test -f 'watcom.c'; then $(CYGPATH_W) 'watcom.c'; else $(CYGPATH_W) '$(srcdir)/watcom.c'; fi`

rott-winrott.o: winrott.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-winrott.o -MD -MP -MF $(DEPDIR)/rott-winrott.Tpo -c -o rott-winrott.o `test -f 'winrott.c' || echo '$(srcdir)/'`winrott.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-winrott.Tpo $(DEPDIR)/rott-winrott.Po
#	$(AM_V_CC)source='winrott.c' object='rott-winrott.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-winrott.o `test -f 'winrott.c' || echo '$(srcdir)/'`winrott.c

rott-winrott.obj: winrott.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-winrott.obj -MD -MP -MF $(DEPDIR)/rott-winrott.Tpo -c -o rott-winrott.obj `if test -f 'winrott.c'; then $(CYGPATH_W) 'winrott.c'; else $(CYGPATH_W) '$(srcdir)/winrott.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-winrott.Tpo $(DEPDIR)/rott-winrott.Po
#	$(AM_V_CC)source='winrott.c' object='rott-winrott.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-winrott.obj `if test -f 'winrott.c'; then $(CYGPATH_W) 'winrott.c'; else $(CYGPATH_W) '$(srcdir)/winrott.c'; fi`

rott-w_wad.o: w_wad.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-w_wad.o -MD -MP -MF $(DEPDIR)/rott-w_wad.Tpo -c -o rott-w_wad.o `test -f 'w_wad.c' || echo '$(srcdir)/'`w_wad.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-w_wad.Tpo $(DEPDIR)/rott-w_wad.Po
#	$(AM_V_CC)source='w_wad.c' object='rott-w_wad.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-w_wad.o `test -f 'w_wad.c' || echo '$(srcdir)/'`w_wad.c

rott-w_wad.obj: w_wad.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-w_wad.obj -MD -MP -MF $(DEPDIR)/rott-w_wad.Tpo -c -o rott-w_wad.obj `if test -f 'w_wad.c'; then $(CYGPATH_W) 'w_wad.c'; else $(CYGPATH_W) '$(srcdir)/w_wad.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-w_wad.Tpo $(DEPDIR)/rott-w_wad.Po
#	$(AM_V_CC)source='w_wad.c' object='rott-w_wad.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-w_wad.obj `if test -f 'w_wad.c'; then $(CYGPATH_W) 'w_wad.c'; else $(CYGPATH_W) '$(srcdir)/w_wad.c'; fi`

rott-z_zone.o: z_zone.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-z_zone.o -MD -MP -MF $(DEPDIR)/rott-z_zone.Tpo -c -o rott-z_zone.o `test -f 'z_zone.c' || echo '$(srcdir)/'`z_zone.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-z_zone.Tpo $(DEPDIR)/rott-z_zone.Po
#	$(AM_V_CC)source='z_zone.c' object='rott-z_zone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-z_zone.o `test -f 'z_zone.c' || echo '$(srcdir)/'`z_zone.c

rott-z_zone.obj: z_zone.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -MT rott-z_zone.obj -MD -MP -MF $(DEPDIR)/rott-z_zone.Tpo -c -o rott-z_zone.obj `if test -f 'z_zone.c'; then $(CYGPATH_W) 'z_zone.c'; else $(CYGPATH_W) '$(srcdir)/z_zone.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-z_zone.Tpo $(DEPDIR)/rott-z_zone.Po
#	$(AM_V_CC)source='z_zone.c' object='rott-z_zone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CFLAGS) $(CFLAGS) -c -o rott-z_zone.obj `if test -f 'z_zone.c'; then $(CYGPATH_W) 'z_zone.c'; else $(CYGPATH_W) '$(srcdir)/z_zone.c'; fi`

.cpp.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

rott-rt_scancodes.o: rt_scancodes.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CXXFLAGS) $(CXXFLAGS) -MT rott-rt_scancodes.o -MD -MP -MF $(DEPDIR)/rott-rt_scancodes.Tpo -c -o rott-rt_scancodes.o `test -f 'rt_scancodes.cpp' || echo '$(srcdir)/'`rt_scancodes.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_scancodes.Tpo $(DEPDIR)/rott-rt_scancodes.Po
#	$(AM_V_CXX)source='rt_scancodes.cpp' object='rott-rt_scancodes.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CXXFLAGS) $(CXXFLAGS) -c -o rott-rt_scancodes.o `test -f 'rt_scancodes.cpp' || echo '$(srcdir)/'`rt_scancodes.cpp

rott-rt_scancodes.obj: rt_scancodes.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CXXFLAGS) $(CXXFLAGS) -MT rott-rt_scancodes.obj -MD -MP -MF $(DEPDIR)/rott-rt_scancodes.Tpo -c -o rott-rt_scancodes.obj `if test -f 'rt_scancodes.cpp'; then $(CYGPATH_W) 'rt_scancodes.cpp'; else $(CYGPATH_W) '$(srcdir)/rt_scancodes.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/rott-rt_scancodes.Tpo $(DEPDIR)/rott-rt_scancodes.Po
#	$(AM_V_CXX)source='rt_scancodes.cpp' object='rott-rt_scancodes.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(rott_CXXFLAGS) $(CXXFLAGS) -c -o rott-rt_scancodes.obj `if test -f 'rt_scancodes.cpp'; then $(CYGPATH_W) 'rt_scancodes.cpp'; else $(CYGPATH_W) '$(srcdir)/rt_scancodes.cpp'; fi`

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-recursive
		-rm -f ./$(DEPDIR)/rott-byteordr.Po
	-rm -f ./$(DEPDIR)/rott-cin_actr.Po
	-rm -f ./$(DEPDIR)/rott-cin_efct.Po
	-rm -f ./$(DEPDIR)/rott-cin_evnt.Po
	-rm -f ./$(DEPDIR)/rott-cin_glob.Po
	-rm -f ./$(DEPDIR)/rott-cin_main.Po
	-rm -f ./$(DEPDIR)/rott-cin_util.Po
	-rm -f ./$(DEPDIR)/rott-dosutil.Po
	-rm -f ./$(DEPDIR)/rott-dukemusc.Po
	-rm -f ./$(DEPDIR)/rott-engine.Po
	-rm -f ./$(DEPDIR)/rott-isr.Po
	-rm -f ./$(DEPDIR)/rott-modexlib.Po
	-rm -f ./$(DEPDIR)/rott-rt_actor.Po
	-rm -f ./$(DEPDIR)/rott-rt_battl.Po
	-rm -f ./$(DEPDIR)/rott-rt_build.Po
	-rm -f ./$(DEPDIR)/rott-rt_cfg.Po
	-rm -f ./$(DEPDIR)/rott-rt_com.Po
	-rm -f ./$(DEPDIR)/rott-rt_crc.Po
	-rm -f ./$(DEPDIR)/rott-rt_debug.Po
	-rm -f ./$(DEPDIR)/rott-rt_dmand.Po
	-rm -f ./$(DEPDIR)/rott-rt_door.Po
	-rm -f ./$(DEPDIR)/rott-rt_draw.Po
	-rm -f ./$(DEPDIR)/rott-rt_err.Po
	-rm -f ./$(DEPDIR)/rott-rt_floor.Po
	-rm -f ./$(DEPDIR)/rott-rt_game.Po
	-rm -f ./$(DEPDIR)/rott-rt_in.Po
	-rm -f ./$(DEPDIR)/rott-rt_main.Po
	-rm -f ./$(DEPDIR)/rott-rt_map.Po
	-rm -f ./$(DEPDIR)/rott-rt_menu.Po
	-rm -f ./$(DEPDIR)/rott-rt_msg.Po
	-rm -f ./$(DEPDIR)/rott-rt_net.Po
	-rm -f ./$(DEPDIR)/rott-rt_playr.Po
	-rm -f ./$(DEPDIR)/rott-rt_rand.Po
	-rm -f ./$(DEPDIR)/rott-rt_scale.Po
	-rm -f ./$(DEPDIR)/rott-rt_scancodes.Po
	-rm -f ./$(DEPDIR)/rott-rt_sound.Po
	-rm -f ./$(DEPDIR)/rott-rt_spbal.Po
	-rm -f ./$(DEPDIR)/rott-rt_sqrt.Po
	-rm -f ./$(DEPDIR)/rott-rt_stat.Po
	-rm -f ./$(DEPDIR)/rott-rt_state.Po
	-rm -f ./$(DEPDIR)/rott-rt_str.Po
	-rm -f ./$(DEPDIR)/rott-rt_swift.Po
	-rm -f ./$(DEPDIR)/rott-rt_ted.Po
	-rm -f ./$(DEPDIR)/rott-rt_util.Po
	-rm -f ./$(DEPDIR)/rott-rt_vid.Po
	-rm -f ./$(DEPDIR)/rott-rt_view.Po
	-rm -f ./$(DEPDIR)/rott-scriplib.Po
	-rm -f ./$(DEPDIR)/rott-w_wad.Po
	-rm -f ./$(DEPDIR)/rott-watcom.Po
	-rm -f ./$(DEPDIR)/rott-winrott.Po
	-rm -f ./$(DEPDIR)/rott-z_zone.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
		-rm -f ./$(DEPDIR)/rott-byteordr.Po
	-rm -f ./$(DEPDIR)/rott-cin_actr.Po
	-rm -f ./$(DEPDIR)/rott-cin_efct.Po
	-rm -f ./$(DEPDIR)/rott-cin_evnt.Po
	-rm -f ./$(DEPDIR)/rott-cin_glob.Po
	-rm -f ./$(DEPDIR)/rott-cin_main.Po
	-rm -f ./$(DEPDIR)/rott-cin_util.Po
	-rm -f ./$(DEPDIR)/rott-dosutil.Po
	-rm -f ./$(DEPDIR)/rott-dukemusc.Po
	-rm -f ./$(DEPDIR)/rott-engine.Po
	-rm -f ./$(DEPDIR)/rott-isr.Po
	-rm -f ./$(DEPDIR)/rott-modexlib.Po
	-rm -f ./$(DEPDIR)/rott-rt_actor.Po
	-rm -f ./$(DEPDIR)/rott-rt_battl.Po
	-rm -f ./$(DEPDIR)/rott-rt_build.Po
	-rm -f ./$(DEPDIR)/rott-rt_cfg.Po
	-rm -f ./$(DEPDIR)/rott-rt_com.Po
	-rm -f ./$(DEPDIR)/rott-rt_crc.Po
	-rm -f ./$(DEPDIR)/rott-rt_debug.Po
	-rm -f ./$(DEPDIR)/rott-rt_dmand.Po
	-rm -f ./$(DEPDIR)/rott-rt_door.Po
	-rm -f ./$(DEPDIR)/rott-rt_draw.Po
	-rm -f ./$(DEPDIR)/rott-rt_err.Po
	-rm -f ./$(DEPDIR)/rott-rt_floor.Po
	-rm -f ./$(DEPDIR)/rott-rt_game.Po
	-rm -f ./$(DEPDIR)/rott-rt_in.Po
	-rm -f ./$(DEPDIR)/rott-rt_main.Po
	-rm -f ./$(DEPDIR)/rott-rt_map.Po
	-rm -f ./$(DEPDIR)/rott-rt_menu.Po
	-rm -f ./$(DEPDIR)/rott-rt_msg.Po
	-rm -f ./$(DEPDIR)/rott-rt_net.Po
	-rm -f ./$(DEPDIR)/rott-rt_playr.Po
	-rm -f ./$(DEPDIR)/rott-rt_rand.Po
	-rm -f ./$(DEPDIR)/rott-rt_scale.Po
	-rm -f ./$(DEPDIR)/rott-rt_scancodes.Po
	-rm -f ./$(DEPDIR)/rott-rt_sound.Po
	-rm -f ./$(DEPDIR)/rott-rt_spbal.Po
	-rm -f ./$(DEPDIR)/rott-rt_sqrt.Po
	-rm -f ./$(DEPDIR)/rott-rt_stat.Po
	-rm -f ./$(DEPDIR)/rott-rt_state.Po
	-rm -f ./$(DEPDIR)/rott-rt_str.Po
	-rm -f ./$(DEPDIR)/rott-rt_swift.Po
	-rm -f ./$(DEPDIR)/rott-rt_ted.Po
	-rm -f ./$(DEPDIR)/rott-rt_util.Po
	-rm -f ./$(DEPDIR)/rott-rt_vid.Po
	-rm -f ./$(DEPDIR)/rott-rt_view.Po
	-rm -f ./$(DEPDIR)/rott-scriplib.Po
	-rm -f ./$(DEPDIR)/rott-w_wad.Po
	-rm -f ./$(DEPDIR)/rott-watcom.Po
	-rm -f ./$(DEPDIR)/rott-winrott.Po
	-rm -f ./$(DEPDIR)/rott-z_zone.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: $(am__recursive_targets) install-am install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am \
	am--depfiles check check-am clean clean-binPROGRAMS \
	clean-generic cscopelist-am ctags ctags-am distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
	ps ps-am tags tags-am uninstall uninstall-am \
	uninstall-binPROGRAMS

.PRECIOUS: Makefile


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
